/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/main.ts
__export(exports, {
  default: () => ThreeStateChecklistPlugin
});
var import_obsidian = __toModule(require("obsidian"));

// src/types.ts
var CheckboxState;
(function(CheckboxState3) {
  CheckboxState3["UNCHECKED"] = "unchecked";
  CheckboxState3["CHECKED"] = "checked";
  CheckboxState3["CANCELLED"] = "cancelled";
})(CheckboxState || (CheckboxState = {}));
var DEFAULT_SETTINGS = {
  enabled: true
};

// src/services/checkbox-service.ts
var CheckboxService = class {
  static getNextState(currentState) {
    switch (currentState) {
      case CheckboxState.UNCHECKED:
        return CheckboxState.CHECKED;
      case CheckboxState.CHECKED:
        return CheckboxState.CANCELLED;
      case CheckboxState.CANCELLED:
        return CheckboxState.UNCHECKED;
      default:
        return CheckboxState.UNCHECKED;
    }
  }
  static getCheckboxState(element) {
    const checkbox = element.querySelector(".task-list-item-checkbox");
    if (!checkbox)
      return CheckboxState.UNCHECKED;
    if (element.classList.contains("is-cancelled")) {
      return CheckboxState.CANCELLED;
    }
    return checkbox.checked ? CheckboxState.CHECKED : CheckboxState.UNCHECKED;
  }
  static updateCheckboxState(element, state) {
    const checkbox = element.querySelector(".task-list-item-checkbox");
    if (!checkbox)
      return;
    switch (state) {
      case CheckboxState.CHECKED:
        checkbox.checked = true;
        element.classList.remove("is-cancelled");
        break;
      case CheckboxState.CANCELLED:
        checkbox.checked = true;
        element.classList.add("is-cancelled");
        break;
      case CheckboxState.UNCHECKED:
        checkbox.checked = false;
        element.classList.remove("is-cancelled");
        break;
    }
  }
};

// src/services/editor-service.ts
var EditorService = class {
  constructor(view) {
    this.view = view;
    this.view = view;
  }
  getLineNumberFromElement(element) {
    const taskItems = Array.from(document.querySelectorAll(".task-list-item"));
    const el = element.closest(".task-list-item");
    if (el === null)
      return -1;
    let index = taskItems.indexOf(el);
    if (index === -1)
      return -1;
    const editor = this.view.editor;
    const totalLines = editor.lineCount();
    for (let i = 0; i < totalLines; i++) {
      const line = editor.getLine(i);
      if (line.match(/^\s*[-*+]\s*\[[ x]\]/i)) {
        if (index === 0)
          return i;
        index--;
      }
    }
    return -1;
  }
  updateCheckboxInLine(lineNumber, state) {
    const editor = this.view.editor;
    const line = editor.getLine(lineNumber);
    const newLine = line.replace(/\[[\sx]\]/i, state === CheckboxState.UNCHECKED ? "[ ]" : state === CheckboxState.CHECKED ? "[x]" : "[x]");
    editor.transaction({
      changes: [
        {
          from: { line: lineNumber, ch: 0 },
          to: { line: lineNumber, ch: line.length },
          text: newLine
        }
      ]
    });
  }
};

// src/main.ts
var ThreeStateChecklistPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.editorService = null;
  }
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      this.loadStyles();
      this.registerCheckboxClickHandler();
    });
  }
  registerCheckboxClickHandler() {
    this.registerDomEvent(document, "click", (evt) => {
      const target = evt.target;
      if (!target.classList.contains("task-list-item-checkbox")) {
        return;
      }
      evt.preventDefault();
      evt.stopPropagation();
      const listItem = target.closest(".task-list-item");
      if (!listItem)
        return;
      const view = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
      if (!view)
        return;
      if (!this.editorService || view !== this.editorService.view) {
        this.editorService = new EditorService(view);
      }
      const currentState = CheckboxService.getCheckboxState(listItem);
      const nextState = CheckboxService.getNextState(currentState);
      CheckboxService.updateCheckboxState(listItem, nextState);
      const lineNumber = this.editorService.getLineNumberFromElement(listItem);
      if (lineNumber !== -1) {
        this.editorService.updateCheckboxInLine(lineNumber, nextState);
      }
    });
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
  loadStyles() {
    const styleEl = document.createElement("style");
    styleEl.id = "three-state-checklist-styles";
    styleEl.textContent = `
      .task-list-item-checkbox {
        border-radius: 0 !important;
      }

      .task-list-item-checkbox:checked {
        background-color: var(--interactive-accent) !important;
        border-radius: 0 !important;
      }

      .task-list-item.is-cancelled .task-list-item-checkbox {
        background-color: var(--text-muted) !important;
        border-radius: 0 !important;
      }

      .task-list-item.is-cancelled .task-list-item-checkbox::after {
        content: '\xD7' !important;
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        font-size: 14px;
        color: var(--background-primary);
      }

      .task-list-item.is-cancelled {
        text-decoration: line-through;
        color: var(--text-muted);
      }
    `;
    document.head.appendChild(styleEl);
  }
  onunload() {
    const styleEl = document.getElementById("three-state-checklist-styles");
    if (styleEl) {
      styleEl.remove();
    }
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsic3JjL21haW4udHMiLCAic3JjL3R5cGVzLnRzIiwgInNyYy9zZXJ2aWNlcy9jaGVja2JveC1zZXJ2aWNlLnRzIiwgInNyYy9zZXJ2aWNlcy9lZGl0b3Itc2VydmljZS50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgUGx1Z2luLCBNYXJrZG93blZpZXcgfSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCB7IFBsdWdpblNldHRpbmdzLCBERUZBVUxUX1NFVFRJTkdTLCBDaGVja2JveFN0YXRlIH0gZnJvbSBcIi4vdHlwZXNcIjtcbmltcG9ydCB7IENoZWNrYm94U2VydmljZSB9IGZyb20gXCIuL3NlcnZpY2VzL2NoZWNrYm94LXNlcnZpY2VcIjtcbmltcG9ydCB7IEVkaXRvclNlcnZpY2UgfSBmcm9tIFwiLi9zZXJ2aWNlcy9lZGl0b3Itc2VydmljZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUaHJlZVN0YXRlQ2hlY2tsaXN0UGx1Z2luIGV4dGVuZHMgUGx1Z2luIHtcbiAgc2V0dGluZ3M6IFBsdWdpblNldHRpbmdzO1xuICBwcml2YXRlIGVkaXRvclNlcnZpY2U6IEVkaXRvclNlcnZpY2UgfCBudWxsID0gbnVsbDtcblxuICBhc3luYyBvbmxvYWQoKSB7XG4gICAgYXdhaXQgdGhpcy5sb2FkU2V0dGluZ3MoKTtcbiAgICB0aGlzLmxvYWRTdHlsZXMoKTtcbiAgICB0aGlzLnJlZ2lzdGVyQ2hlY2tib3hDbGlja0hhbmRsZXIoKTtcbiAgfVxuXG4gIHByaXZhdGUgcmVnaXN0ZXJDaGVja2JveENsaWNrSGFuZGxlcigpIHtcbiAgICB0aGlzLnJlZ2lzdGVyRG9tRXZlbnQoZG9jdW1lbnQsIFwiY2xpY2tcIiwgKGV2dDogTW91c2VFdmVudCkgPT4ge1xuICAgICAgY29uc3QgdGFyZ2V0ID0gZXZ0LnRhcmdldCBhcyBIVE1MRWxlbWVudDtcblxuICAgICAgLy8gQ2hlY2sgaWYgY2xpY2tlZCBlbGVtZW50IGlzIGEgY2hlY2tib3hcbiAgICAgIGlmICghdGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcInRhc2stbGlzdC1pdGVtLWNoZWNrYm94XCIpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gUHJldmVudCBkZWZhdWx0IGNoZWNrYm94IGJlaGF2aW9yXG4gICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgY29uc3QgbGlzdEl0ZW0gPSB0YXJnZXQuY2xvc2VzdChcIi50YXNrLWxpc3QtaXRlbVwiKTtcbiAgICAgIGlmICghbGlzdEl0ZW0pIHJldHVybjtcblxuICAgICAgY29uc3QgdmlldyA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVWaWV3T2ZUeXBlKE1hcmtkb3duVmlldyk7XG4gICAgICBpZiAoIXZpZXcpIHJldHVybjtcblxuICAgICAgLy8gSW5pdGlhbGl6ZSBlZGl0b3Igc2VydmljZSBpZiBuZWVkZWRcbiAgICAgIGlmICghdGhpcy5lZGl0b3JTZXJ2aWNlIHx8IHZpZXcgIT09IHRoaXMuZWRpdG9yU2VydmljZS52aWV3KSB7XG4gICAgICAgIHRoaXMuZWRpdG9yU2VydmljZSA9IG5ldyBFZGl0b3JTZXJ2aWNlKHZpZXcpO1xuICAgICAgfVxuXG4gICAgICAvLyBHZXQgY3VycmVudCBzdGF0ZSBhbmQgY2FsY3VsYXRlIG5leHQgc3RhdGVcbiAgICAgIGNvbnN0IGN1cnJlbnRTdGF0ZSA9IENoZWNrYm94U2VydmljZS5nZXRDaGVja2JveFN0YXRlKGxpc3RJdGVtKTtcbiAgICAgIGNvbnN0IG5leHRTdGF0ZSA9IENoZWNrYm94U2VydmljZS5nZXROZXh0U3RhdGUoY3VycmVudFN0YXRlKTtcblxuICAgICAgLy8gVXBkYXRlIHRoZSBjaGVja2JveCBzdGF0ZSBpbiBET01cbiAgICAgIENoZWNrYm94U2VydmljZS51cGRhdGVDaGVja2JveFN0YXRlKGxpc3RJdGVtLCBuZXh0U3RhdGUpO1xuXG4gICAgICAvLyBVcGRhdGUgdGhlIG1hcmtkb3duIGNvbnRlbnRcbiAgICAgIGNvbnN0IGxpbmVOdW1iZXIgPSB0aGlzLmVkaXRvclNlcnZpY2UuZ2V0TGluZU51bWJlckZyb21FbGVtZW50KGxpc3RJdGVtKTtcbiAgICAgIGlmIChsaW5lTnVtYmVyICE9PSAtMSkge1xuICAgICAgICB0aGlzLmVkaXRvclNlcnZpY2UudXBkYXRlQ2hlY2tib3hJbkxpbmUobGluZU51bWJlciwgbmV4dFN0YXRlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGFzeW5jIGxvYWRTZXR0aW5ncygpIHtcbiAgICB0aGlzLnNldHRpbmdzID0gT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9TRVRUSU5HUywgYXdhaXQgdGhpcy5sb2FkRGF0YSgpKTtcbiAgfVxuXG4gIGFzeW5jIHNhdmVTZXR0aW5ncygpIHtcbiAgICBhd2FpdCB0aGlzLnNhdmVEYXRhKHRoaXMuc2V0dGluZ3MpO1xuICB9XG5cbiAgcHJpdmF0ZSBsb2FkU3R5bGVzKCkge1xuICAgIGNvbnN0IHN0eWxlRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gICAgc3R5bGVFbC5pZCA9IFwidGhyZWUtc3RhdGUtY2hlY2tsaXN0LXN0eWxlc1wiO1xuICAgIHN0eWxlRWwudGV4dENvbnRlbnQgPSBgXG4gICAgICAudGFzay1saXN0LWl0ZW0tY2hlY2tib3gge1xuICAgICAgICBib3JkZXItcmFkaXVzOiAwICFpbXBvcnRhbnQ7XG4gICAgICB9XG5cbiAgICAgIC50YXNrLWxpc3QtaXRlbS1jaGVja2JveDpjaGVja2VkIHtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0taW50ZXJhY3RpdmUtYWNjZW50KSAhaW1wb3J0YW50O1xuICAgICAgICBib3JkZXItcmFkaXVzOiAwICFpbXBvcnRhbnQ7XG4gICAgICB9XG5cbiAgICAgIC50YXNrLWxpc3QtaXRlbS5pcy1jYW5jZWxsZWQgLnRhc2stbGlzdC1pdGVtLWNoZWNrYm94IHtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tdGV4dC1tdXRlZCkgIWltcG9ydGFudDtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogMCAhaW1wb3J0YW50O1xuICAgICAgfVxuXG4gICAgICAudGFzay1saXN0LWl0ZW0uaXMtY2FuY2VsbGVkIC50YXNrLWxpc3QtaXRlbS1jaGVja2JveDo6YWZ0ZXIge1xuICAgICAgICBjb250ZW50OiAnXHUwMEQ3JyAhaW1wb3J0YW50O1xuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgIHRvcDogNTAlO1xuICAgICAgICBsZWZ0OiA1MCU7XG4gICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xuICAgICAgICBmb250LXNpemU6IDE0cHg7XG4gICAgICAgIGNvbG9yOiB2YXIoLS1iYWNrZ3JvdW5kLXByaW1hcnkpO1xuICAgICAgfVxuXG4gICAgICAudGFzay1saXN0LWl0ZW0uaXMtY2FuY2VsbGVkIHtcbiAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBsaW5lLXRocm91Z2g7XG4gICAgICAgIGNvbG9yOiB2YXIoLS10ZXh0LW11dGVkKTtcbiAgICAgIH1cbiAgICBgO1xuICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc3R5bGVFbCk7XG4gIH1cblxuICBvbnVubG9hZCgpIHtcbiAgICBjb25zdCBzdHlsZUVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0aHJlZS1zdGF0ZS1jaGVja2xpc3Qtc3R5bGVzXCIpO1xuICAgIGlmIChzdHlsZUVsKSB7XG4gICAgICBzdHlsZUVsLnJlbW92ZSgpO1xuICAgIH1cbiAgfVxufVxuIiwgImV4cG9ydCBlbnVtIENoZWNrYm94U3RhdGUge1xuICBVTkNIRUNLRUQgPSAndW5jaGVja2VkJyxcbiAgQ0hFQ0tFRCA9ICdjaGVja2VkJyxcbiAgQ0FOQ0VMTEVEID0gJ2NhbmNlbGxlZCdcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQbHVnaW5TZXR0aW5ncyB7XG4gIGVuYWJsZWQ6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX1NFVFRJTkdTOiBQbHVnaW5TZXR0aW5ncyA9IHtcbiAgZW5hYmxlZDogdHJ1ZVxufTsiLCAiaW1wb3J0IHsgQ2hlY2tib3hTdGF0ZSB9IGZyb20gXCIuLi90eXBlc1wiO1xuXG5leHBvcnQgY2xhc3MgQ2hlY2tib3hTZXJ2aWNlIHtcbiAgc3RhdGljIGdldE5leHRTdGF0ZShjdXJyZW50U3RhdGU6IENoZWNrYm94U3RhdGUpOiBDaGVja2JveFN0YXRlIHtcbiAgICBzd2l0Y2ggKGN1cnJlbnRTdGF0ZSkge1xuICAgICAgY2FzZSBDaGVja2JveFN0YXRlLlVOQ0hFQ0tFRDpcbiAgICAgICAgcmV0dXJuIENoZWNrYm94U3RhdGUuQ0hFQ0tFRDtcbiAgICAgIGNhc2UgQ2hlY2tib3hTdGF0ZS5DSEVDS0VEOlxuICAgICAgICByZXR1cm4gQ2hlY2tib3hTdGF0ZS5DQU5DRUxMRUQ7XG4gICAgICBjYXNlIENoZWNrYm94U3RhdGUuQ0FOQ0VMTEVEOlxuICAgICAgICByZXR1cm4gQ2hlY2tib3hTdGF0ZS5VTkNIRUNLRUQ7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gQ2hlY2tib3hTdGF0ZS5VTkNIRUNLRUQ7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGdldENoZWNrYm94U3RhdGUoZWxlbWVudDogRWxlbWVudCk6IENoZWNrYm94U3RhdGUge1xuICAgIGNvbnN0IGNoZWNrYm94ID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yKFxuICAgICAgXCIudGFzay1saXN0LWl0ZW0tY2hlY2tib3hcIixcbiAgICApIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG4gICAgaWYgKCFjaGVja2JveCkgcmV0dXJuIENoZWNrYm94U3RhdGUuVU5DSEVDS0VEO1xuXG4gICAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiaXMtY2FuY2VsbGVkXCIpKSB7XG4gICAgICByZXR1cm4gQ2hlY2tib3hTdGF0ZS5DQU5DRUxMRUQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNoZWNrYm94LmNoZWNrZWQgPyBDaGVja2JveFN0YXRlLkNIRUNLRUQgOiBDaGVja2JveFN0YXRlLlVOQ0hFQ0tFRDtcbiAgfVxuXG4gIHN0YXRpYyB1cGRhdGVDaGVja2JveFN0YXRlKGVsZW1lbnQ6IEVsZW1lbnQsIHN0YXRlOiBDaGVja2JveFN0YXRlKTogdm9pZCB7XG4gICAgY29uc3QgY2hlY2tib3ggPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICBcIi50YXNrLWxpc3QtaXRlbS1jaGVja2JveFwiLFxuICAgICkgYXMgSFRNTElucHV0RWxlbWVudDtcbiAgICBpZiAoIWNoZWNrYm94KSByZXR1cm47XG5cbiAgICBzd2l0Y2ggKHN0YXRlKSB7XG4gICAgICBjYXNlIENoZWNrYm94U3RhdGUuQ0hFQ0tFRDpcbiAgICAgICAgY2hlY2tib3guY2hlY2tlZCA9IHRydWU7XG4gICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcImlzLWNhbmNlbGxlZFwiKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIENoZWNrYm94U3RhdGUuQ0FOQ0VMTEVEOlxuICAgICAgICBjaGVja2JveC5jaGVja2VkID0gdHJ1ZTtcbiAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiaXMtY2FuY2VsbGVkXCIpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgQ2hlY2tib3hTdGF0ZS5VTkNIRUNLRUQ6XG4gICAgICAgIGNoZWNrYm94LmNoZWNrZWQgPSBmYWxzZTtcbiAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwiaXMtY2FuY2VsbGVkXCIpO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cbn1cbiIsICJpbXBvcnQgeyBFZGl0b3IsIE1hcmtkb3duVmlldyB9IGZyb20gXCJvYnNpZGlhblwiO1xuaW1wb3J0IHsgQ2hlY2tib3hTdGF0ZSB9IGZyb20gXCIuLi90eXBlc1wiO1xuXG5leHBvcnQgY2xhc3MgRWRpdG9yU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyB2aWV3OiBNYXJrZG93blZpZXcpIHtcbiAgICB0aGlzLnZpZXcgPSB2aWV3O1xuICB9XG5cbiAgZ2V0TGluZU51bWJlckZyb21FbGVtZW50KGVsZW1lbnQ6IEVsZW1lbnQpOiBudW1iZXIge1xuICAgIC8vIEdldCBhbGwgdGFzayBsaXN0IGl0ZW1zIGluIHRoZSBkb2N1bWVudFxuICAgIGNvbnN0IHRhc2tJdGVtcyA9IEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi50YXNrLWxpc3QtaXRlbVwiKSk7XG4gICAgY29uc3QgZWwgPSBlbGVtZW50LmNsb3Nlc3QoXCIudGFzay1saXN0LWl0ZW1cIik7XG5cbiAgICBpZiAoZWwgPT09IG51bGwpIHJldHVybiAtMTtcblxuICAgIGxldCBpbmRleCA9IHRhc2tJdGVtcy5pbmRleE9mKGVsKTtcblxuICAgIGlmIChpbmRleCA9PT0gLTEpIHJldHVybiAtMTtcblxuICAgIC8vIEZpbmQgdGhlIGNvcnJlc3BvbmRpbmcgbGluZSBpbiB0aGUgZWRpdG9yXG4gICAgY29uc3QgZWRpdG9yID0gdGhpcy52aWV3LmVkaXRvcjtcbiAgICBjb25zdCB0b3RhbExpbmVzID0gZWRpdG9yLmxpbmVDb3VudCgpO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0b3RhbExpbmVzOyBpKyspIHtcbiAgICAgIGNvbnN0IGxpbmUgPSBlZGl0b3IuZ2V0TGluZShpKTtcbiAgICAgIGlmIChsaW5lLm1hdGNoKC9eXFxzKlstKitdXFxzKlxcW1sgeF1cXF0vaSkpIHtcbiAgICAgICAgaWYgKGluZGV4ID09PSAwKSByZXR1cm4gaTtcbiAgICAgICAgaW5kZXgtLTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICB1cGRhdGVDaGVja2JveEluTGluZShsaW5lTnVtYmVyOiBudW1iZXIsIHN0YXRlOiBDaGVja2JveFN0YXRlKTogdm9pZCB7XG4gICAgY29uc3QgZWRpdG9yID0gdGhpcy52aWV3LmVkaXRvcjtcbiAgICBjb25zdCBsaW5lID0gZWRpdG9yLmdldExpbmUobGluZU51bWJlcik7XG4gICAgY29uc3QgbmV3TGluZSA9IGxpbmUucmVwbGFjZShcbiAgICAgIC9cXFtbXFxzeF1cXF0vaSxcbiAgICAgIHN0YXRlID09PSBDaGVja2JveFN0YXRlLlVOQ0hFQ0tFRFxuICAgICAgICA/IFwiWyBdXCJcbiAgICAgICAgOiBzdGF0ZSA9PT0gQ2hlY2tib3hTdGF0ZS5DSEVDS0VEXG4gICAgICAgICAgPyBcIlt4XVwiXG4gICAgICAgICAgOiBcIlt4XVwiLFxuICAgICk7XG5cbiAgICBlZGl0b3IudHJhbnNhY3Rpb24oe1xuICAgICAgY2hhbmdlczogW1xuICAgICAgICB7XG4gICAgICAgICAgZnJvbTogeyBsaW5lOiBsaW5lTnVtYmVyLCBjaDogMCB9LFxuICAgICAgICAgIHRvOiB7IGxpbmU6IGxpbmVOdW1iZXIsIGNoOiBsaW5lLmxlbmd0aCB9LFxuICAgICAgICAgIHRleHQ6IG5ld0xpbmUsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH0pO1xuICB9XG59XG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUEsc0JBQXFDOzs7QUNBOUIsSUFBSztBQUFMLFVBQUssZ0JBQUw7QUFDTCxnQ0FBWTtBQUNaLDhCQUFVO0FBQ1YsZ0NBQVk7QUFBQSxHQUhGO0FBVUwsSUFBTSxtQkFBbUM7QUFBQSxFQUM5QyxTQUFTO0FBQUE7OztBQ1RKLDRCQUFzQjtBQUFBLFNBQ3BCLGFBQWEsY0FBNEM7QUFDOUQsWUFBUTtBQUFBLFdBQ0QsY0FBYztBQUNqQixlQUFPLGNBQWM7QUFBQSxXQUNsQixjQUFjO0FBQ2pCLGVBQU8sY0FBYztBQUFBLFdBQ2xCLGNBQWM7QUFDakIsZUFBTyxjQUFjO0FBQUE7QUFFckIsZUFBTyxjQUFjO0FBQUE7QUFBQTtBQUFBLFNBSXBCLGlCQUFpQixTQUFpQztBQUN2RCxVQUFNLFdBQVcsUUFBUSxj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
